struct Fog
{
    int activeFog;
    vec3 colour;
    float density;
    float exponent;
};

struct DirectionalLight
{
    vec3 colour;
    vec3 direction;
    float intensity;
};

struct Material
{
    vec3 colour;
    int useColour;
    float reflectance;
};

uniform Fog fog;
uniform DirectionalLight directionalLight;
uniform vec3 ambientLight;
uniform Material material;

vec4 calcFog(vec3 pos, vec4 colour, Fog fog, vec3 ambientLight, DirectionalLight dirLight)
{
    vec3 fogColor = fog.colour * (ambientLight + dirLight.colour * dirLight.intensity);
    float distance = length(pos);
    float fogFactor = 1.0 / exp( (distance * fog.density)* (distance * fog.density));
    fogFactor = clamp( fogFactor, 0.0, 1.0 );

    vec3 resultColour = mix(fogColor, colour.xyz, fogFactor);
    return vec4(resultColour.xyz, 1);
}

vec4 calcLightColour(vec3 colour, float intensity, vec3 position, vec3 dir, vec3 normal, vec3 distortedNormal) {
    vec4 diffuseColour = vec4(0);
    vec4 specColour = vec4(0);

    // Diffuse Light
    float diffuseFactor = max(dot(normal, dir), 0.0);
    diffuseColour = vec4(colour, 1.0) * intensity * diffuseFactor;

    // Specular Light DOESN"T FUCKING WORK. Ill return to this at some point
    vec3 toCamera = normalize(-position);
    vec3 toLight = -dir;
    vec3 reflectedLight = normalize(reflect(toLight, distortedNormal));
    float specularFactor = max(dot(toCamera, reflectedLight), 0.0);
    specularFactor = pow(specularFactor, material.reflectance);
    specColour = vec4(colour, 1.0) * intensity  * specularFactor;
	
    return vec4(diffuseColour); //not currently returning specular
}

vec4 calcDirectionalLight(DirectionalLight light, vec3 position, vec3 normal, vec3 distortedNormal)
{
    vec4 light_colour = calcLightColour(light.colour, light.intensity, position, light.direction, normal, distortedNormal);
    return light_colour;
}